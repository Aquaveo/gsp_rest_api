openapi: 3.0.1
info:
  title: GEOGLOWS REST Data Service
  description: "
    A REST Data Service to access high resolution streamflow forecasts and retrospective simulations from the GEOGLOWS program. The river discharge time series are indexed according to a unique identifier known as a River ID (river_id). For help finding river numbers, consult <https://data.geoglows.org/tutorials/finding-river-numbers>.
    
    
    These data are also available free of charge via the Amazon Web Service's Open Data Program. You may experience better download times and more flexibility to query and subset data by accessing the copies there. Refer to <https://data.geoglows.org> to view tutorials and get information about the data stored there.
    
    
    The best way to interact with this data service is via an authoritative Python package, titled \"geoglows\". The geoglows Python package is available on pypi (```pip install geoglows```) and conda on the conda-forge channel (```conda install -c conda-forge geoglows```). Get information on the GEOGLOWS python package. .
    "
  version: 2.0.0
servers:
- url: https://geoglows.ecmwf.int/api/v2
paths:
  /dates:
    get:
      summary: Available dates
      description: This operation returns the available forecast dates in JSON format.
      responses:
        "200":
          description: The response body will contain a list of available dates.
          content: {}
        "400":
          description: Bad request. Check request and parameters.
          content:
            error:
              example: An unexpected error occurred.
  /forecast/{river_id}:
    get:
      summary: Returns average forecasted flow
      description: This operation returns a simple summary of the ensemble forecast.
      parameters:
      - name: river_id
        in: path
        description: "The stream reach's unique ID also referred to as common identifier\
          \ (COMID). If the ID is not known, use the getRiverID method."
        required: true
        schema:
          type: number
          format: integer
      - name: format
        in: query
        description: The file format of the response
        schema:
          type: string
          default: csv
          enum:
          - csv
          - json
      - name: date
        in: query
        description: The given date for the forecast of interest given as YYYYMMDD
          (e.g. 20201020). If left blank it defaults to the most recent date. This
          API provides access to data within the last 30 days.
        schema:
          pattern: "^[0-9]{4}(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])(.(00|12)|)$"
          type: string
      responses:
        "200":
          description: The response body will contain a time series along with metadata
            about the stream reach of interest.
          content: {}
        "400":
          description: Bad request. Check request and parameters.
          content:
            error:
              example: An unexpected error occurred.
  /forecaststats/{river_id}:
    get:
      summary: Return basic forecast statistics
      description: This operation returns statistics calculated from 51 forecast ensemble
        members. A successful response will return a time series with date-value pairs.
      parameters:
      - name: river_id
        in: path
        description: "The stream reach's unique ID also referred to as common identifier\
          \ (COMID). If the ID is not known, use the getRiverID method."
        required: true
        schema:
          type: number
          format: integer
      - name: format
        in: query
        description: The file format of the response
        schema:
          type: string
          default: csv
          enum:
          - csv
          - json
      - name: date
        in: query
        description: The given date for the forecast of interest given as YYYYMMDD
          (e.g. 20201020). If left blank it defaults to the most recent date. This
          API provides access to data within the last 30 days.
        schema:
          pattern: "^[0-9]{4}(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])(.(00|12)|)$"
          type: string
      responses:
        "200":
          description: The response body will contain a time series along with metadata
            about the stream reach of interest.
          content: {}
        "400":
          description: Bad request. Check request and parameters.
          content:
            error:
              example: An unexpected error occurred.
  /forecastensembles/{river_id}:
    get:
      summary: Return forecast ensembles
      description: This operation returns a timeseries for each of the 51 normal forecast
        ensemble members and the 52nd higher resolution forecast. A successful response
        will return a time series with date-value pairs.
      parameters:
      - name: river_id
        in: path
        description: "The stream reach's unique ID also referred to as common identifier\
          \ (COMID). If the ID is not known, use the getRiverID method."
        required: true
        schema:
          type: number
          format: integer
      - name: date
        in: query
        description: The given date for the forecast of interest given as YYYYMMDD
          (e.g. 20201020). If left blank it defaults to the most recent date. This
          API provides access to data within the last 30 days.
        schema:
          pattern: "^[0-9]{4}(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])(.(00|12)|)$"
          type: string
      - name: ensemble
        in: query
        description: |-
          The desired forecast ensemble(s). Input can be:
            - An individual ensemble (i.e. 5)
            - A group of ensembles separated by commas (i.e. 1,5,9)
            - A range of ensembles separated by a dash (i.e. 3-15)
            - A combination of individual numbers and ranges (i.e. 1,5,7-16,24-35)
        schema:
          type: string
          default: all
      - name: format
        in: query
        description: The file format of the response
        schema:
          type: string
          default: csv
          enum:
          - csv
          - json
      responses:
        "200":
          description: The response body will contain a time series for each ensemble
            along with metadata about the stream reach of interest.
          content: {}
        "400":
          description: Bad request. Check request and parameters.
          content:
            error:
              example: An unexpected error occurred.
  /forecastrecords/{river_id}:
    get:
      summary: Return rolling record of average flows
      description: |-
        This retrieves the rolling record of the mean of the forecasted streamflow during the first 24 hours of each day's forecast. That is, each day day after the
        streamflow forecasts are computed, the average of first 8 of the 3-hour timesteps are recorded to a csv. This retrieves that rolling record
      parameters:
      - name: river_id
        in: path
        description: "The stream reach's unique ID also referred to as common identifier\
          \ (COMID). If the ID is not known, use the getRiverID method."
        required: true
        schema:
          type: number
          format: integer
      - name: start_date
        in: query
        description: A date in YYYYMMDD format when you would like to start retrieving
          data (if available). Defaults to Jan 1 of the current year.
        schema:
          pattern: "^[0-9]{4}(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])$"
          type: string
      - name: end_date
        in: query
        description: A date in YYYYMMDD format when you would like to stop retrieving
          data (if available). Defaults to Dec 31 of the current year.
        schema:
          pattern: "^[0-9]{4}(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])$"
          type: string
      responses:
        "200":
          description: The response body will contain a time series for the specified
            stream reach
          content: {}
        "400":
          description: Bad request. Check request and parameters.
          content:
            error:
              example: An unexpected error occurred.
  /hydroviewer/{river_id}:
    get:
      summary: "Returns forecast records, forecast stats, and return periods."
      description: "A shorthand for retrieving the forecast records and stats, and\
        \ return periods, usually all plotted together."
      parameters:
      - name: river_id
        in: path
        description: "The stream reach's unique ID also referred to as common identifier\
          \ (COMID). If the ID is not known, use the getRiverID method."
        required: true
        schema:
          type: number
          format: integer
      - name: format
        in: query
        description: The file format of the response
        schema:
          type: string
          default: csv
          enum:
          - csv
          - json
      - name: date
        in: query
        description: The given date for the forecast of interest given as YYYYMMDD
          (e.g. 20201020). If left blank it defaults to the most recent date. This
          API provides access to data within the last 30 days.
        schema:
          pattern: "^[0-9]{4}(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])(.(00|12)|)$"
          type: string
      responses:
        "200":
          description: The response body will contain a time series along with metadata
            about the stream reach of interest.
          content: {}
        "400":
          description: Bad request. Check request and parameters.
          content:
            error:
              example: An unexpected error occurred.
  /retrospective/{river_id}:
    get:
      summary: Return historic simulation
      description: This operation returns simulated streamflow data based on the ERA-5
        dataset. A successful response will return a time series with date-value pairs.
      parameters:
      - name: river_id
        in: path
        description: "The stream reach's unique ID also referred to as common identifier\
          \ (COMID). If the ID is not known, use the getRiverID method."
        required: true
        schema:
          type: number
          format: integer
      - name: format
        in: query
        description: The file format of the response
        schema:
          type: string
          default: csv
          enum:
          - csv
          - json
      - name: start_date
        in: query
        description: A date in YYYYMMDD format of the earliest simulation date to
          retrieve. Simulated values on or after the specified date are returned.
          Earliest is 19400101.
        schema:
          pattern: "^[0-9]{4}(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])$"
          type: string
          default: "19400101"
      - name: end_date
        in: query
        description: A date in YYYYMMDD format of the latest simulation date to retrieve.
          Simulated values on or before the specified date are returned. Defaults
          to the most recent date.
        schema:
          pattern: "^[0-9]{4}(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])$"
          type: string
      responses:
        "200":
          description: The response body will contain a time series along with metadata
            about the stream reach of interest.
          content: {}
        "400":
          description: Bad request. Check request and parameters.
          content:
            error:
              example: An unexpected error occurred.
  /dailyaverages/{river_id}:
    get:
      summary: Return historic simulation's daily averages
      description: This operation returns the average flow for each day of the year
        for the Historic Simulation
      parameters:
      - name: river_id
        in: path
        description: "The stream reach's unique ID also referred to as common identifier\
          \ (COMID). If the ID is not known, use the getRiverID method."
        required: true
        schema:
          type: number
          format: integer
      - name: format
        in: query
        description: The file format of the response
        schema:
          type: string
          default: csv
          enum:
          - csv
          - json
      responses:
        "200":
          description: The response body will contain a time series along with metadata
            about the stream reach of interest.
          content: {}
        "400":
          description: Bad request. Check request and parameters.
          content:
            error:
              example: An unexpected error occurred.
  /monthlyaverages/{river_id}:
    get:
      summary: Return historic simulation's monthly averages
      description: This operation returns the average flow for each month of the year
        for the Historic Simulation
      parameters:
      - name: river_id
        in: path
        description: "The stream reach's unique ID also referred to as common identifier\
          \ (COMID). If the ID is not known, use the getRiverID method."
        required: true
        schema:
          type: number
          format: integer
      - name: format
        in: query
        description: The file format of the response
        schema:
          type: string
          default: csv
          enum:
          - csv
          - json
      responses:
        "200":
          description: The response body will contain a time series along with metadata
            about the stream reach of interest.
          content: {}
        "400":
          description: Bad request. Check request and parameters.
          content:
            error:
              example: An unexpected error occurred.
  /annualaverages/{river_id}:
    get:
      summary: Return historic simulation's annual averages
      description: This operation returns the average flow for each year of the Historic
        Simulation
      parameters:
      - name: river_id
        in: path
        description: "The stream reach's unique ID also referred to as common identifier\
          \ (COMID). If the ID is not known, use the getRiverID method."
        required: true
        schema:
          type: number
          format: integer
      - name: format
        in: query
        description: The file format of the response
        schema:
          type: string
          default: csv
          enum:
          - csv
          - json
      responses:
        "200":
          description: The response body will contain a time series along with metadata
            about the stream reach of interest.
          content: {}
        "400":
          description: Bad request. Check request and parameters.
          content:
            error:
              example: An unexpected error occurred.
  /returnperiods/{river_id}:
    get:
      summary: Return historic simulation
      description: "This operation returns the 2, 5, 10, 25, 50, and 100 year return\
        \ period based on the 80-years simulated streamflow data and using the Gumbel\
        \ Method. A successful response will return key-value pairs for each return\
        \ period along with metadata."
      parameters:
      - name: river_id
        in: path
        description: "The stream reach's unique ID also referred to as common identifier\
          \ (COMID). If the ID is not known, use the getRiverID method."
        required: true
        schema:
          type: number
          format: integer
      - name: format
        in: query
        description: The file format of the response
        schema:
          type: string
          default: csv
          enum:
          - csv
          - json
      responses:
        "200":
          description: The response body will contain a key-value pairs for each return
            period along with metadata about the stream reach of interest.
          content: {}
        "400":
          description: Bad request. Check request and parameters.
          content:
            error:
              example: An unexpected error occurred.
  /getRiverID:
    get:
      summary: Find the Reach ID nearest a point using latitude and longitude coordinates
      description: Find the Reach ID nearest a point using latitude and longitude
        coordinates
      parameters:
      - name: lat
        in: query
        description: The latitude of a point to search
        required: true
        schema:
          type: number
          format: float
      - name: lon
        in: query
        description: The longitude of a point to search
        required: true
        schema:
          type: number
          format: float
      responses:
        "200":
          description: The response body will contain the reach ID of the nearest
            stream reach.
          content: {}
        "400":
          description: Bad request. Check request and parameters.
          content:
            error:
              example: An unexpected error occurred.
components: {}
